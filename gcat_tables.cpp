#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#include "main.h"
#include "gcat_tables.h"

// auto morphs shown as BANDMINLEX permutations

const char * t416[416] = {
	"6789123789123456", "6789123789123465", "6789123789123564", "6789123789132465",
	"6789123789132546", "6789123789132564", "6789123789231564", "6789123789231645",
	"6789123798132465", "6789123798132546", "6789123798132564", "6789123798213564",
	"6789123798213654", "6789123798231564", "6789123798231645", "6789123897231564",
	"6789123897231645", "6789132789123546", "6789132789132546", "6789132789132564",
	"6789132789213456", "6789132789213645", "6789132789213654", "6789132789231546",
	"6789132789231564", "6789132879231564", "6789231789123645", "6789231789132546",
	"6789231789231564", "6789231789312456", "6789231798213645", "7189236689237145", //31 item 6...
	"7189236689237154", "7189236689237415", "7189236689237451", "7189236689237514",
	"7189236689237541", "7189236689273145", "7189236689273154", "7189236689273415",//40
	"7189236689273451", "7189236689273514", "7189236689273541", "7189236689327145",
	"7189236689327154", "7189236689327415", "7189236689327451", "7189236689327514",
	"7189236689327541", "7189236689372145", "7189236689372154", "7189236689372415",
	"7189236689372451", "7189236689372514", "7189236689372541", "7189236689723145",
	"7189236689723154", "7189236689723415", "7189236689723514", "7189236689723541",
	"7189236689732145", "7189236689732154", "7189236689732415", "7189236689732514",
	"7189236689732541", "7189236698237145", "7189236698237154", "7189236698237415",
	"7189236698237514", "7189236698237541", "7189236698273145", "7189236698273154",
	"7189236698273415", "7189236698273514", "7189236698273541", "7189236698327145",
	"7189236698327154", "7189236698327415", "7189236698327541", "7189236698372145",//80
	"7189236698372154", "7189236698372415", "7189236698372514", "7189236698372541",
	"7189236698723145", "7189236698723154", "7189236698723415", "7189236698723514",
	"7189236698732145", "7189236698732154", "7189236698732415", "7189236698732514",
	"7189236869237145", "7189236869237514", "7189236869273145", "7189236869273154",
	"7189236869273415", "7189236869273514", "7189236869327154", "7189236869327415",
	"7189236869327514", "7189236869372145", "7189236869372154", "7189236869372415",
	"7189236869372514", "7189236869723145", "7189236869723154", "7189236869723514",
	"7189236869732145", "7189236869732154", "7189236896237145", "7189236896237154",
	"7189236896237514", "7189236896273145", "7189236896273154", "7189236896273514",
	"7189236896327145", "7189236896327154", "7189236896327514", "7189236896372145",//120
	"7189236896372154", "7189236896372514", "7189236896723154", "7189236896723514",
	"7189236896732154", "7189236896732514", "7189236968237154", "7189236968237514",
	"7189236968273514", "7189236968327154", "7189236968327514", "7189236968372154",
	"7189236968372514", "7189236968723154", "7189236968732154", "7189236986237154",
	"7189236986273154", "7189236986327154", "7189236986372154", "7189263689237145",// 263 en 140 index 139
	"7189263689237415", "7189263689237451", "7189263689237514", "7189263689273154",
	"7189263689273415", "7189263689273451", "7189263689273514", "7189263689273541",
	"7189263689327154", "7189263689327415", "7189263689327514", "7189263689327541",
	"7189263689372145", "7189263689372154", "7189263689372415", "7189263689372451",
	"7189263689372514", "7189263689723145", "7189263689723154", "7189263689723451",//160
	"7189263689732145", "7189263689732154", "7189263689732415", "7189263689732451",
	"7189263689732514", "7189263689732541", "7189263698237154", "7189263698237415",
	"7189263698237451", "7189263698237514", "7189263698273145", "7189263698273415",
	"7189263698273451", "7189263698273514", "7189263698327145", "7189263698327154",
	"7189263698327415", "7189263698327451", "7189263698327514", "7189263698372154",
	"7189263698372415", "7189263698372514", "7189263698372541", "7189263698732145",
	"7189263698732154", "7189263698732451", "7189263869237154", "7189263869237415",
	"7189263869237514", "7189263869273451", "7189263869327415", "7189263869327451",
	"7189263869327514", "7189263869372145", "7189263869372154", "7189263869372514",
	"7189263896237145", "7189263896237154", "7189263896237451", "7189263896327145",//200
	"7189263896327154", "7189263896327415", "7189263896327451", "7189263896327514",
	"7189263896327541", "7189263896372145", "7189263896372154", "7189263896372451",
	"7189263968327145", "7189263968327154", "7189263968327415", "7189263968327514",
	"7189263968327541", "7189263968372145", "7189263986327145", "7189263986327154",
	"7189263986327451", "7189326689237451", "7189326689237514", "7189326689237541",// 326 en 218 index 217
	"7189326689273145", "7189326689273451", "7189326689273541", "7189326689327154",
	"7189326689327451", "7189326689327541", "7189326689372415", "7189326689372541",
	"7189326689723145", "7189326689723415", "7189326689732145", "7189326689732415",
	"7189326689732514", "7189326689732541", "7189326698237145", "7189326698237541",
	"7189326698273514", "7189326698273541", "7189326698732415", "7189326869372514",//240 623 en 237 index 236
	"7189623689237145", "7189623689237154", "7189623689273145", "7189623689273154",
	"7189623689273541", "7189623689327145", "7189623689327154", "7189623689372145",
	"7189623689372154", "7189623689372514", "7189623689723145", "7189623689723154",
	"7189623689723415", "7189623689723451", "7189623689723514", "7189623689723541",
	"7189623689732145", "7189623689732154", "7189623689732415", "7189623689732451",
	"7189623689732514", "7189623689732541", "7189623698237145", "7189623698237154",
	"7189623698237541", "7189623698273145", "7189623698273154", "7189623698327145",
	"7189623698327154", "7189623698327514", "7189623698372145", "7189623698372154",
	"7189623698732145", "7189623698732154", "7189623698732415", "7189623698732514",
	"7189623698732541", "7189623869237145", "7189623869273145", "7189623869273154",//280
	"7189623869273451", "7189623869327154", "7189623869372145", "7189623869372154",
	"7189623896237145", "7189623896237154", "7189623896237415", "7189623896237451",
	"7189623896237514", "7189623896237541", "7189623896327145", "7189623896327154",
	"7189623896327415", "7189623896327451", "7189623896327514", "7189623896372145",
	"7189623896372154", "7189623896372451", "7189623968327145", "7189623968327154",//300
	"7189623968327415", "7189623968372145", "7189623968372154", "7189623986327145", 
	"7189623986327154", "7189623986327415", "7189623986327451", "7189623986327514",
	"7189623986327541", "7189632689237145", "7189632689273145", "7189632689273154", // 632 en 310 index 309
	"7189632689273514", "7189632689327154", "7189632689372145", "7189632689372154",
	"7189632689723145", "7189632689723514", "7189632689732145", "7189632689732154",//320
	"7189632689732514", "7189632689732541", "7189632698237145", "7189632698237154",
	"7189632698237514", "7189632698273145", "7189632698327145", "7189632698327154",
	"7189632698327541", "7189632698372154", "7189632698732145", "7189632698732514",
	"7189632869273145", "7189632869372145", "7189632896237145", "7189632896237415",
	"7189632896327145", "7189632896327154", "7189632896327451", "7189632896327541",
	"7189632896372145", "7189632896372154", "7189632896372451", "7189632968327145",
	"7189632968327154", "7189632968327451", "7189632986327145", "7289163689173452",// end 71 31_346 347items
	"7289163689713254", "7289163698137425", "7289163698137524", "7289163698317254",
	"7289163698317524", "7289163698713254", "7289163869713245", "7289163869731245",
	"7289163869731524", "7289163896317245", "7289163896731524", "7289613689173245",//360
	"7289613689713245", "7289613689713254", "7289613698137254", "7289613698317245",
	"7289613698317254", "7289613698713245", "7289613869713245", "7289613869731245",
	"7289613869731254", "7289613896137245", "7289613896137254", "7289613896317245",
	"7289613896317425", "7289613896731245", "7289613896731254", "7289613968137245",
	"7289613968137254", "7289613968731245", "7289613986137245", "7289631689173245",//380
	"7289631689713254", "7289631698317254", "7289631869713245", "7289631869713254",
	"7289631869731245", "7289631869731254", "7289631896137245", "7289631896137254",
	"7289631896137425", "7289631896317245", "7289631896317254", "7289631896731245",
	"7289631968137254", "7289631968731245", "7289631968731254", "7289631986137245",
	"7289631986137254", "7389612896127345", "7389612896127354", "7389612896172345",//400
	"7389612896172354", "7389612896217345", "7389612896217354", "7389612896271345", 
	"7389612896271354", "7389612896712354", "7389612896721354", "7389612986172354",
	"7389612986217354",	"7389621896127345",	"7389621896217354",	"7389621986127354",
	"7893612896127345", "7893612896127354", "7893612896217354", "7893612986217354",
};
 BANDMINLEX::PERM automorphsp[519] = {
{0,{0,1,2},{0,2,1,3,5,4,6,8,7},{0,2,1,3,5,4,6,8,7}},
{0,{0,1,2},{1,0,2,4,3,5,7,6,8},{1,0,2,4,3,5,7,6,8}},
{0,{0,1,2},{2,0,1,5,3,4,8,6,7},{1,2,0,4,5,3,7,8,6}},
{0,{0,1,2},{1,2,0,4,5,3,7,8,6},{2,0,1,5,3,4,8,6,7}},
{0,{0,1,2},{2,1,0,5,4,3,8,7,6},{2,1,0,5,4,3,8,7,6}},
{0,{0,2,1},{0,1,2,6,7,8,3,4,5},{0,1,2,6,7,8,3,4,5}},
{0,{0,2,1},{0,2,1,6,8,7,3,5,4},{0,2,1,6,8,7,3,5,4}},
{0,{0,2,1},{1,0,2,7,6,8,4,3,5},{1,0,2,7,6,8,4,3,5}},
{0,{0,2,1},{2,0,1,8,6,7,5,3,4},{1,2,0,7,8,6,4,5,3}},
{0,{0,2,1},{1,2,0,7,8,6,4,5,3},{2,0,1,8,6,7,5,3,4}},
{0,{0,2,1},{2,1,0,8,7,6,5,4,3},{2,1,0,8,7,6,5,4,3}},
{0,{1,0,2},{0,1,2,6,7,8,3,4,5},{3,4,5,0,1,2,6,7,8}},
{0,{1,0,2},{0,2,1,6,8,7,3,5,4},{3,5,4,0,2,1,6,8,7}},
{0,{1,0,2},{1,0,2,7,6,8,4,3,5},{4,3,5,1,0,2,7,6,8}},
{0,{1,0,2},{2,0,1,8,6,7,5,3,4},{4,5,3,1,2,0,7,8,6}},
{0,{1,0,2},{1,2,0,7,8,6,4,5,3},{5,3,4,2,0,1,8,6,7}},
{0,{1,0,2},{2,1,0,8,7,6,5,4,3},{5,4,3,2,1,0,8,7,6}},
{0,{1,2,0},{0,1,2,3,4,5,6,7,8},{6,7,8,0,1,2,3,4,5}},
{0,{1,2,0},{0,2,1,3,5,4,6,8,7},{6,8,7,0,2,1,3,5,4}},
{0,{1,2,0},{1,0,2,4,3,5,7,6,8},{7,6,8,1,0,2,4,3,5}},//20
{0,{1,2,0},{2,0,1,5,3,4,8,6,7},{7,8,6,1,2,0,4,5,3}},
{0,{1,2,0},{1,2,0,4,5,3,7,8,6},{8,6,7,2,0,1,5,3,4}},
{0,{1,2,0},{2,1,0,5,4,3,8,7,6},{8,7,6,2,1,0,5,4,3}},
{0,{2,0,1},{0,1,2,3,4,5,6,7,8},{3,4,5,6,7,8,0,1,2}},
{0,{2,0,1},{0,2,1,3,5,4,6,8,7},{3,5,4,6,8,7,0,2,1}},
{0,{2,0,1},{1,0,2,4,3,5,7,6,8},{4,3,5,7,6,8,1,0,2}},
{0,{2,0,1},{2,0,1,5,3,4,8,6,7},{4,5,3,7,8,6,1,2,0}},
{0,{2,0,1},{1,2,0,4,5,3,7,8,6},{5,3,4,8,6,7,2,0,1}},
{0,{2,0,1},{2,1,0,5,4,3,8,7,6},{5,4,3,8,7,6,2,1,0}},
{0,{2,1,0},{0,1,2,6,7,8,3,4,5},{6,7,8,3,4,5,0,1,2}},//30
{0,{2,1,0},{0,2,1,6,8,7,3,5,4},{6,8,7,3,5,4,0,2,1}},
{0,{2,1,0},{1,0,2,7,6,8,4,3,5},{7,6,8,4,3,5,1,0,2}},
{0,{2,1,0},{2,0,1,8,6,7,5,3,4},{7,8,6,4,5,3,1,2,0}},
{0,{2,1,0},{1,2,0,7,8,6,4,5,3},{8,6,7,5,3,4,2,0,1}},
{0,{2,1,0},{2,1,0,8,7,6,5,4,3},{8,7,6,5,4,3,2,1,0}},
{0,{0,1,2},{3,4,5,6,7,8,0,1,2},{6,7,8,0,1,2,3,4,5}},
{0,{0,1,2},{3,5,4,6,8,7,0,2,1},{6,8,7,0,2,1,3,5,4}},
{0,{0,1,2},{4,3,5,7,6,8,1,0,2},{7,6,8,1,0,2,4,3,5}},
{0,{0,1,2},{5,3,4,8,6,7,2,0,1},{7,8,6,1,2,0,4,5,3}},
{0,{0,1,2},{4,5,3,7,8,6,1,2,0},{8,6,7,2,0,1,5,3,4}},//40
{0,{0,1,2},{5,4,3,8,7,6,2,1,0},{8,7,6,2,1,0,5,4,3}},
{0,{0,2,1},{3,4,5,0,1,2,6,7,8},{3,4,5,0,1,2,6,7,8}},
{0,{0,2,1},{3,5,4,0,2,1,6,8,7},{3,5,4,0,2,1,6,8,7}},
{0,{0,2,1},{4,3,5,1,0,2,7,6,8},{4,3,5,1,0,2,7,6,8}},
{0,{0,2,1},{5,3,4,2,0,1,8,6,7},{4,5,3,1,2,0,7,8,6}},
{0,{0,2,1},{4,5,3,1,2,0,7,8,6},{5,3,4,2,0,1,8,6,7}},
{0,{0,2,1},{5,4,3,2,1,0,8,7,6},{5,4,3,2,1,0,8,7,6}},
{0,{1,0,2},{3,4,5,0,1,2,6,7,8},{6,7,8,3,4,5,0,1,2}},
{0,{1,0,2},{3,5,4,0,2,1,6,8,7},{6,8,7,3,5,4,0,2,1}},
{0,{1,0,2},{4,3,5,1,0,2,7,6,8},{7,6,8,4,3,5,1,0,2}},//50
{0,{1,0,2},{5,3,4,2,0,1,8,6,7},{7,8,6,4,5,3,1,2,0}},
{0,{1,0,2},{4,5,3,1,2,0,7,8,6},{8,6,7,5,3,4,2,0,1}},
{0,{1,0,2},{5,4,3,2,1,0,8,7,6},{8,7,6,5,4,3,2,1,0}},
{0,{1,2,0},{3,4,5,6,7,8,0,1,2},{3,4,5,6,7,8,0,1,2}},
{0,{1,2,0},{3,5,4,6,8,7,0,2,1},{3,5,4,6,8,7,0,2,1}},
{0,{1,2,0},{4,3,5,7,6,8,1,0,2},{4,3,5,7,6,8,1,0,2}},
{0,{1,2,0},{5,3,4,8,6,7,2,0,1},{4,5,3,7,8,6,1,2,0}},
{0,{1,2,0},{4,5,3,7,8,6,1,2,0},{5,3,4,8,6,7,2,0,1}},
{0,{1,2,0},{5,4,3,8,7,6,2,1,0},{5,4,3,8,7,6,2,1,0}},
{0,{2,0,1},{3,4,5,6,7,8,0,1,2},{0,1,2,3,4,5,6,7,8}},//60
{0,{2,0,1},{3,5,4,6,8,7,0,2,1},{0,2,1,3,5,4,6,8,7}},
{0,{2,0,1},{4,3,5,7,6,8,1,0,2},{1,0,2,4,3,5,7,6,8}},
{0,{2,0,1},{5,3,4,8,6,7,2,0,1},{1,2,0,4,5,3,7,8,6}},
{0,{2,0,1},{4,5,3,7,8,6,1,2,0},{2,0,1,5,3,4,8,6,7}},
{0,{2,0,1},{5,4,3,8,7,6,2,1,0},{2,1,0,5,4,3,8,7,6}},
{0,{2,1,0},{3,4,5,0,1,2,6,7,8},{0,1,2,6,7,8,3,4,5}},
{0,{2,1,0},{3,5,4,0,2,1,6,8,7},{0,2,1,6,8,7,3,5,4}},
{0,{2,1,0},{4,3,5,1,0,2,7,6,8},{1,0,2,7,6,8,4,3,5}},
{0,{2,1,0},{5,3,4,2,0,1,8,6,7},{1,2,0,7,8,6,4,5,3}},
{0,{2,1,0},{4,5,3,1,2,0,7,8,6},{2,0,1,8,6,7,5,3,4}},//70
{0,{2,1,0},{5,4,3,2,1,0,8,7,6},{2,1,0,8,7,6,5,4,3}},
{0,{0,1,2},{6,7,8,0,1,2,3,4,5},{3,4,5,6,7,8,0,1,2}},
{0,{0,1,2},{6,8,7,0,2,1,3,5,4},{3,5,4,6,8,7,0,2,1}},
{0,{0,1,2},{7,6,8,1,0,2,4,3,5},{4,3,5,7,6,8,1,0,2}},
{0,{0,1,2},{8,6,7,2,0,1,5,3,4},{4,5,3,7,8,6,1,2,0}},
{0,{0,1,2},{7,8,6,1,2,0,4,5,3},{5,3,4,8,6,7,2,0,1}},
{0,{0,1,2},{8,7,6,2,1,0,5,4,3},{5,4,3,8,7,6,2,1,0}},
{0,{0,2,1},{6,7,8,3,4,5,0,1,2},{6,7,8,3,4,5,0,1,2}},
{0,{0,2,1},{6,8,7,3,5,4,0,2,1},{6,8,7,3,5,4,0,2,1}},
{0,{0,2,1},{7,6,8,4,3,5,1,0,2},{7,6,8,4,3,5,1,0,2}},//80
{0,{0,2,1},{8,6,7,5,3,4,2,0,1},{7,8,6,4,5,3,1,2,0}},
{0,{0,2,1},{7,8,6,4,5,3,1,2,0},{8,6,7,5,3,4,2,0,1}},
{0,{0,2,1},{8,7,6,5,4,3,2,1,0},{8,7,6,5,4,3,2,1,0}},
{0,{1,0,2},{6,7,8,3,4,5,0,1,2},{0,1,2,6,7,8,3,4,5}},
{0,{1,0,2},{6,8,7,3,5,4,0,2,1},{0,2,1,6,8,7,3,5,4}},
{0,{1,0,2},{7,6,8,4,3,5,1,0,2},{1,0,2,7,6,8,4,3,5}},
{0,{1,0,2},{8,6,7,5,3,4,2,0,1},{1,2,0,7,8,6,4,5,3}},
{0,{1,0,2},{7,8,6,4,5,3,1,2,0},{2,0,1,8,6,7,5,3,4}},
{0,{1,0,2},{8,7,6,5,4,3,2,1,0},{2,1,0,8,7,6,5,4,3}},
{0,{1,2,0},{6,7,8,0,1,2,3,4,5},{0,1,2,3,4,5,6,7,8}},//90
{0,{1,2,0},{6,8,7,0,2,1,3,5,4},{0,2,1,3,5,4,6,8,7}},
{0,{1,2,0},{7,6,8,1,0,2,4,3,5},{1,0,2,4,3,5,7,6,8}},
{0,{1,2,0},{8,6,7,2,0,1,5,3,4},{1,2,0,4,5,3,7,8,6}},
{0,{1,2,0},{7,8,6,1,2,0,4,5,3},{2,0,1,5,3,4,8,6,7}},
{0,{1,2,0},{8,7,6,2,1,0,5,4,3},{2,1,0,5,4,3,8,7,6}},
{0,{2,0,1},{6,7,8,0,1,2,3,4,5},{6,7,8,0,1,2,3,4,5}},
{0,{2,0,1},{6,8,7,0,2,1,3,5,4},{6,8,7,0,2,1,3,5,4}},
{0,{2,0,1},{7,6,8,1,0,2,4,3,5},{7,6,8,1,0,2,4,3,5}},
{0,{2,0,1},{8,6,7,2,0,1,5,3,4},{7,8,6,1,2,0,4,5,3}},
{0,{2,0,1},{7,8,6,1,2,0,4,5,3},{8,6,7,2,0,1,5,3,4}},//100
{0,{2,0,1},{8,7,6,2,1,0,5,4,3},{8,7,6,2,1,0,5,4,3}},
{0,{2,1,0},{6,7,8,3,4,5,0,1,2},{3,4,5,0,1,2,6,7,8}},
{0,{2,1,0},{6,8,7,3,5,4,0,2,1},{3,5,4,0,2,1,6,8,7}},
{0,{2,1,0},{7,6,8,4,3,5,1,0,2},{4,3,5,1,0,2,7,6,8}},
{0,{2,1,0},{8,6,7,5,3,4,2,0,1},{4,5,3,1,2,0,7,8,6}},
{0,{2,1,0},{7,8,6,4,5,3,1,2,0},{5,3,4,2,0,1,8,6,7}},
{0,{2,1,0},{8,7,6,5,4,3,2,1,0},{5,4,3,2,1,0,8,7,6}},//107
{1,{0,1,2},{0,2,1,3,5,4,6,8,7},{0,2,1,3,5,4,6,8,7}},
{1,{1,0,2},{3,4,5,0,1,2,6,7,8},{6,7,8,3,4,5,0,1,2}},
{1,{1,0,2},{3,5,4,0,2,1,6,8,7},{6,8,7,3,5,4,0,2,1}},
{2,{0,1,2},{2,0,1,5,3,4,8,6,7},{1,2,0,4,5,3,7,8,6}},
{2,{0,1,2},{1,2,0,4,5,3,7,8,6},{2,0,1,5,3,4,8,6,7}},
{2,{1,0,2},{3,4,5,0,1,2,6,7,8},{6,7,8,3,4,5,0,1,2}},
{2,{1,0,2},{5,3,4,2,0,1,8,6,7},{7,8,6,4,5,3,1,2,0}},
{2,{1,0,2},{4,5,3,1,2,0,7,8,6},{8,6,7,5,3,4,2,0,1}},
{3,{0,1,2},{0,2,1,3,5,4,6,8,7},{0,2,1,3,5,4,6,8,7}},
{3,{1,0,2},{0,1,2,6,7,8,3,4,5},{3,4,5,0,1,2,6,7,8}},
{3,{1,0,2},{0,2,1,6,8,7,3,5,4},{3,5,4,0,2,1,6,8,7}},
{3,{1,2,0},{3,4,5,6,8,7,0,1,2},{3,5,4,6,7,8,0,1,2}},
{3,{1,2,0},{3,5,4,6,7,8,0,2,1},{3,4,5,6,8,7,0,2,1}},
{3,{2,1,0},{3,4,5,0,1,2,6,8,7},{0,2,1,6,7,8,3,4,5}},
{3,{2,1,0},{3,5,4,0,2,1,6,7,8},{0,1,2,6,8,7,3,5,4}},
{3,{0,2,1},{6,7,8,3,5,4,0,1,2},{6,7,8,3,5,4,0,1,2}},
{3,{0,2,1},{6,8,7,3,4,5,0,2,1},{6,8,7,3,4,5,0,2,1}},
{3,{2,0,1},{6,7,8,0,1,2,3,5,4},{6,7,8,0,2,1,3,4,5}},
{3,{2,0,1},{6,8,7,0,2,1,3,4,5},{6,8,7,0,1,2,3,5,4}},
{ 4,{1,0,2},{2,1,0,8,7,6,5,4,3},{5,4,3,2,1,0,8,7,6} },
{ 6,{0,1,2},{2,0,1,5,3,4,8,6,7},{1,2,0,4,5,3,7,8,6} },
{ 6,{0,1,2},{1,2,0,4,5,3,7,8,6},{2,0,1,5,3,4,8,6,7} },
{ 6,{1,0,2},{0,1,2,6,7,8,3,4,5},{3,4,5,0,1,2,6,7,8} },
{ 6,{1,0,2},{2,0,1,8,6,7,5,3,4},{4,5,3,1,2,0,7,8,6} },
{ 6,{1,0,2},{1,2,0,7,8,6,4,5,3},{5,3,4,2,0,1,8,6,7} },
{ 7,{0,1,2},{2,0,1,5,3,4,8,6,7},{1,2,0,4,5,3,7,8,6} },
{ 7,{0,1,2},{1,2,0,4,5,3,7,8,6},{2,0,1,5,3,4,8,6,7} },
{ 7,{1,0,2},{0,2,1,6,8,7,3,5,4},{3,5,4,0,2,1,6,8,7} },
{ 7,{1,0,2},{1,0,2,7,6,8,4,3,5},{4,3,5,1,0,2,7,6,8} },
{ 7,{1,0,2},{2,1,0,8,7,6,5,4,3},{5,4,3,2,1,0,8,7,6} },
{ 7,{1,2,0},{3,4,5,7,8,6,0,1,2},{5,3,4,6,7,8,0,1,2} },
{ 7,{1,2,0},{5,3,4,6,7,8,2,0,1},{3,4,5,7,8,6,1,2,0} },
{ 7,{1,2,0},{4,5,3,8,6,7,1,2,0},{4,5,3,8,6,7,2,0,1} },
{ 7,{2,1,0},{3,5,4,0,2,1,7,6,8},{1,0,2,6,8,7,3,5,4} },
{ 7,{2,1,0},{4,3,5,1,0,2,8,7,6},{2,1,0,7,6,8,4,3,5} },
{ 7,{2,1,0},{5,4,3,2,1,0,6,8,7},{0,2,1,8,7,6,5,4,3} },
{ 7,{0,2,1},{6,8,7,5,4,3,0,2,1},{6,8,7,5,4,3,0,2,1} },
{ 7,{0,2,1},{7,6,8,3,5,4,1,0,2},{7,6,8,3,5,4,1,0,2} },
{ 7,{0,2,1},{8,7,6,4,3,5,2,1,0},{8,7,6,4,3,5,2,1,0} },
{ 7,{2,0,1},{6,7,8,0,1,2,5,3,4},{6,7,8,1,2,0,3,4,5} },
{ 7,{2,0,1},{8,6,7,2,0,1,4,5,3},{7,8,6,2,0,1,4,5,3} },
{ 7,{2,0,1},{7,8,6,1,2,0,3,4,5},{8,6,7,0,1,2,5,3,4} },
{ 8,{0,1,2},{0,2,1,3,5,4,6,8,7},{0,2,1,3,5,4,6,8,7} },
{ 8,{1,0,2},{0,1,2,6,7,8,3,4,5},{3,4,5,0,1,2,6,7,8} },
{ 8,{1,0,2},{0,2,1,6,8,7,3,5,4},{3,5,4,0,2,1,6,8,7} },
{ 8,{0,1,2},{3,4,5,6,7,8,0,1,2},{6,7,8,0,1,2,3,4,5} },
{ 8,{0,1,2},{3,5,4,6,8,7,0,2,1},{6,8,7,0,2,1,3,5,4} },
{ 8,{1,0,2},{3,4,5,0,1,2,6,7,8},{6,7,8,3,4,5,0,1,2} },
{ 8,{1,0,2},{3,5,4,0,2,1,6,8,7},{6,8,7,3,5,4,0,2,1} },
{ 8,{0,1,2},{6,7,8,0,1,2,3,4,5},{3,4,5,6,7,8,0,1,2} },
{ 8,{0,1,2},{6,8,7,0,2,1,3,5,4},{3,5,4,6,8,7,0,2,1} },
{ 8,{1,0,2},{6,7,8,3,4,5,0,1,2},{0,1,2,6,7,8,3,4,5} },
{ 8,{1,0,2},{6,8,7,3,5,4,0,2,1},{0,2,1,6,8,7,3,5,4} },
{ 9,{1,0,2},{3,4,5,0,1,2,6,7,8},{6,7,8,3,4,5,0,1,2} },
{ 10,{1,0,2},{3,4,5,0,1,2,6,7,8},{6,7,8,3,4,5,0,1,2} },
{ 11,{0,2,1},{2,1,0,7,8,6,5,3,4},{2,1,0,7,8,6,5,3,4} },
{ 12,{1,0,2},{0,2,1,6,8,7,3,5,4},{3,5,4,0,2,1,6,8,7} },
{ 12,{0,1,2},{5,3,4,8,6,7,2,0,1},{7,8,6,1,2,0,4,5,3} },
{ 12,{1,0,2},{5,4,3,2,1,0,8,7,6},{8,7,6,5,4,3,2,1,0} },
{ 12,{0,1,2},{7,8,6,1,2,0,4,5,3},{5,3,4,8,6,7,2,0,1} },
{ 12,{1,0,2},{7,6,8,4,3,5,1,0,2},{1,0,2,7,6,8,4,3,5} },
{ 13,{1,0,2},{0,1,2,6,7,8,3,4,5},{3,4,5,0,1,2,6,7,8} },
{ 14,{1,0,2},{0,2,1,6,8,7,3,5,4},{3,5,4,0,2,1,6,8,7} },
{ 15,{0,1,2},{2,0,1,5,3,4,8,6,7},{1,2,0,4,5,3,7,8,6} },
{ 15,{0,1,2},{1,2,0,4,5,3,7,8,6},{2,0,1,5,3,4,8,6,7} },
{ 15,{0,2,1},{0,1,2,7,8,6,5,3,4},{0,1,2,7,8,6,5,3,4} },
{ 15,{0,2,1},{2,0,1,6,7,8,4,5,3},{1,2,0,8,6,7,3,4,5} },
{ 15,{0,2,1},{1,2,0,8,6,7,3,4,5},{2,0,1,6,7,8,4,5,3} },
{ 15,{1,0,2},{0,1,2,6,7,8,3,4,5},{3,4,5,0,1,2,6,7,8} },
{ 15,{1,0,2},{2,0,1,8,6,7,5,3,4},{4,5,3,1,2,0,7,8,6} },
{ 15,{1,0,2},{1,2,0,7,8,6,4,5,3},{5,3,4,2,0,1,8,6,7} },
{ 15,{1,2,0},{0,1,2,4,5,3,8,6,7},{7,8,6,0,1,2,5,3,4} },
{ 15,{1,2,0},{2,0,1,3,4,5,7,8,6},{8,6,7,1,2,0,3,4,5} },
{ 15,{1,2,0},{1,2,0,5,3,4,6,7,8},{6,7,8,2,0,1,4,5,3} },
{ 15,{2,0,1},{0,1,2,5,3,4,7,8,6},{3,4,5,7,8,6,2,0,1} },
{ 15,{2,0,1},{2,0,1,4,5,3,6,7,8},{4,5,3,8,6,7,0,1,2} },
{ 15,{2,0,1},{1,2,0,3,4,5,8,6,7},{5,3,4,6,7,8,1,2,0} },
{ 15,{2,1,0},{0,1,2,8,6,7,4,5,3},{7,8,6,3,4,5,2,0,1} },
{ 15,{2,1,0},{2,0,1,7,8,6,3,4,5},{8,6,7,4,5,3,0,1,2} },
{ 15,{2,1,0},{1,2,0,6,7,8,5,3,4},{6,7,8,5,3,4,1,2,0} },
{ 15,{0,1,2},{3,4,5,6,7,8,0,1,2},{6,7,8,0,1,2,3,4,5} },
{ 15,{0,1,2},{5,3,4,8,6,7,2,0,1},{7,8,6,1,2,0,4,5,3} },
{ 15,{0,1,2},{4,5,3,7,8,6,1,2,0},{8,6,7,2,0,1,5,3,4} },
{ 15,{0,2,1},{3,4,5,1,2,0,8,6,7},{5,3,4,0,1,2,7,8,6} },
{ 15,{0,2,1},{5,3,4,0,1,2,7,8,6},{3,4,5,1,2,0,8,6,7} },
{ 15,{0,2,1},{4,5,3,2,0,1,6,7,8},{4,5,3,2,0,1,6,7,8} },
{ 15,{1,0,2},{3,4,5,0,1,2,6,7,8},{6,7,8,3,4,5,0,1,2} },
{ 15,{1,0,2},{5,3,4,2,0,1,8,6,7},{7,8,6,4,5,3,1,2,0} },
{ 15,{1,0,2},{4,5,3,1,2,0,7,8,6},{8,6,7,5,3,4,2,0,1} },
{ 15,{1,2,0},{3,4,5,7,8,6,2,0,1},{5,3,4,7,8,6,0,1,2} },
{ 15,{1,2,0},{5,3,4,6,7,8,1,2,0},{3,4,5,8,6,7,1,2,0} },
{ 15,{1,2,0},{4,5,3,8,6,7,0,1,2},{4,5,3,6,7,8,2,0,1} },
{ 15,{2,0,1},{3,4,5,8,6,7,1,2,0},{2,0,1,3,4,5,7,8,6} },
{ 15,{2,0,1},{5,3,4,7,8,6,0,1,2},{0,1,2,4,5,3,8,6,7} },
{ 15,{2,0,1},{4,5,3,6,7,8,2,0,1},{1,2,0,5,3,4,6,7,8} },
{ 15,{2,1,0},{3,4,5,2,0,1,7,8,6},{2,0,1,7,8,6,3,4,5} },
{ 15,{2,1,0},{5,3,4,1,2,0,6,7,8},{0,1,2,8,6,7,4,5,3} },
{ 15,{2,1,0},{4,5,3,0,1,2,8,6,7},{1,2,0,6,7,8,5,3,4} },
{ 15,{0,1,2},{6,7,8,0,1,2,3,4,5},{3,4,5,6,7,8,0,1,2} },
{ 15,{0,1,2},{8,6,7,2,0,1,5,3,4},{4,5,3,7,8,6,1,2,0} },
{ 15,{0,1,2},{7,8,6,1,2,0,4,5,3},{5,3,4,8,6,7,2,0,1} },
{ 15,{0,2,1},{6,7,8,4,5,3,2,0,1},{7,8,6,5,3,4,0,1,2} },
{ 15,{0,2,1},{8,6,7,3,4,5,1,2,0},{8,6,7,3,4,5,1,2,0} },
{ 15,{0,2,1},{7,8,6,5,3,4,0,1,2},{6,7,8,4,5,3,2,0,1} },
{ 15,{1,0,2},{6,7,8,3,4,5,0,1,2},{0,1,2,6,7,8,3,4,5} },
{ 15,{1,0,2},{8,6,7,5,3,4,2,0,1},{1,2,0,7,8,6,4,5,3} },
{ 15,{1,0,2},{7,8,6,4,5,3,1,2,0},{2,0,1,8,6,7,5,3,4} },
{ 15,{1,2,0},{6,7,8,1,2,0,5,3,4},{0,1,2,5,3,4,7,8,6} },
{ 15,{1,2,0},{8,6,7,0,1,2,4,5,3},{1,2,0,3,4,5,8,6,7} },
{ 15,{1,2,0},{7,8,6,2,0,1,3,4,5},{2,0,1,4,5,3,6,7,8} },
{ 15,{2,0,1},{6,7,8,2,0,1,4,5,3},{7,8,6,2,0,1,3,4,5} },
{ 15,{2,0,1},{8,6,7,1,2,0,3,4,5},{8,6,7,0,1,2,4,5,3} },
{ 15,{2,0,1},{7,8,6,0,1,2,5,3,4},{6,7,8,1,2,0,5,3,4} },
{ 15,{2,1,0},{6,7,8,5,3,4,1,2,0},{3,4,5,2,0,1,7,8,6} },
{ 15,{2,1,0},{8,6,7,4,5,3,0,1,2},{4,5,3,0,1,2,8,6,7} },
{ 15,{2,1,0},{7,8,6,3,4,5,2,0,1},{5,3,4,1,2,0,6,7,8} },
{ 16,{0,1,2},{2,0,1,5,3,4,8,6,7},{1,2,0,4,5,3,7,8,6} },
{ 16,{0,1,2},{1,2,0,4,5,3,7,8,6},{2,0,1,5,3,4,8,6,7} },
{ 16,{1,0,2},{3,4,5,0,1,2,6,7,8},{6,7,8,3,4,5,0,1,2} },
{ 16,{1,0,2},{5,3,4,2,0,1,8,6,7},{7,8,6,4,5,3,1,2,0} },
{ 16,{1,0,2},{4,5,3,1,2,0,7,8,6},{8,6,7,5,3,4,2,0,1} },
{ 17,{0,2,1},{5,4,3,2,1,0,8,7,6},{5,4,3,2,1,0,8,7,6} },
{ 18,{2,1,0},{8,7,6,5,4,3,2,1,0},{5,3,4,1,2,0,8,7,6} },
{ 20,{0,2,1},{2,1,0,8,7,6,5,4,3},{2,1,0,8,7,6,5,4,3} },
{ 22,{2,1,0},{3,4,5,0,1,2,8,7,6},{1,0,2,6,7,8,3,4,5} },
{ 24,{2,1,0},{3,5,4,0,2,1,8,7,6},{1,0,2,6,8,7,3,5,4} },
{ 25,{0,2,1},{0,2,1,7,8,6,5,3,4},{0,2,1,7,8,6,5,3,4} },
{ 26,{0,1,2},{2,0,1,5,3,4,8,6,7},{1,2,0,4,5,3,7,8,6} },
{ 26,{0,1,2},{1,2,0,4,5,3,7,8,6},{2,0,1,5,3,4,8,6,7} },
{ 26,{1,2,0},{0,1,2,3,4,5,8,6,7},{6,7,8,0,1,2,3,4,5} },
{ 26,{1,2,0},{2,0,1,5,3,4,7,8,6},{7,8,6,1,2,0,4,5,3} },
{ 26,{1,2,0},{1,2,0,4,5,3,6,7,8},{8,6,7,2,0,1,5,3,4} },
{ 26,{2,0,1},{0,1,2,3,4,5,7,8,6},{3,4,5,6,7,8,0,1,2} },
{ 26,{2,0,1},{2,0,1,5,3,4,6,7,8},{4,5,3,7,8,6,1,2,0} },
{ 26,{2,0,1},{1,2,0,4,5,3,8,6,7},{5,3,4,8,6,7,2,0,1} },
{ 26,{0,2,1},{3,5,4,0,2,1,6,8,7},{3,5,4,0,2,1,6,8,7} },
{ 26,{0,2,1},{4,3,5,1,0,2,7,6,8},{4,3,5,1,0,2,7,6,8} },
{ 26,{0,2,1},{5,4,3,2,1,0,8,7,6},{5,4,3,2,1,0,8,7,6} },
{ 26,{1,0,2},{3,5,4,0,2,1,8,7,6},{6,8,7,3,5,4,0,2,1} },
{ 26,{1,0,2},{4,3,5,1,0,2,6,8,7},{7,6,8,4,3,5,1,0,2} },
{ 26,{1,0,2},{5,4,3,2,1,0,7,6,8},{8,7,6,5,4,3,2,1,0} },
{ 26,{2,1,0},{3,5,4,0,2,1,7,6,8},{0,2,1,6,8,7,3,5,4} },
{ 26,{2,1,0},{4,3,5,1,0,2,8,7,6},{1,0,2,7,6,8,4,3,5} },
{ 26,{2,1,0},{5,4,3,2,1,0,6,8,7},{2,1,0,8,7,6,5,4,3} },
{ 27,{2,1,0},{3,4,5,0,1,2,7,6,8},{0,2,1,6,7,8,3,4,5} },
{ 28,{0,1,2},{2,0,1,5,3,4,8,6,7},{1,2,0,4,5,3,7,8,6} },
{ 28,{0,1,2},{1,2,0,4,5,3,7,8,6},{2,0,1,5,3,4,8,6,7} },
{ 28,{2,1,0},{0,2,1,8,7,6,5,4,3},{6,8,7,3,5,4,0,2,1} },
{ 28,{2,1,0},{1,0,2,6,8,7,3,5,4},{7,6,8,4,3,5,1,0,2} },
{ 28,{2,1,0},{2,1,0,7,6,8,4,3,5},{8,7,6,5,4,3,2,1,0} },
{ 28,{0,1,2},{3,4,5,6,7,8,1,2,0},{8,6,7,0,1,2,3,4,5} },
{ 28,{0,1,2},{5,3,4,8,6,7,0,1,2},{6,7,8,1,2,0,4,5,3} },
{ 28,{0,1,2},{4,5,3,7,8,6,2,0,1},{7,8,6,2,0,1,5,3,4} },
{ 28,{2,1,0},{3,5,4,0,2,1,8,7,6},{1,0,2,6,8,7,3,5,4} },
{ 28,{2,1,0},{4,3,5,1,0,2,6,8,7},{2,1,0,7,6,8,4,3,5} },
{ 28,{2,1,0},{5,4,3,2,1,0,7,6,8},{0,2,1,8,7,6,5,4,3} },
{ 28,{0,1,2},{6,7,8,1,2,0,4,5,3},{5,3,4,8,6,7,0,1,2} },
{ 28,{0,1,2},{8,6,7,0,1,2,3,4,5},{3,4,5,6,7,8,1,2,0} },
{ 28,{0,1,2},{7,8,6,2,0,1,5,3,4},{4,5,3,7,8,6,2,0,1} },
{ 28,{2,1,0},{6,8,7,3,5,4,0,2,1},{4,3,5,1,0,2,6,8,7} },
{ 28,{2,1,0},{7,6,8,4,3,5,1,0,2},{5,4,3,2,1,0,7,6,8} },
{ 28,{2,1,0},{8,7,6,5,4,3,2,1,0},{3,5,4,0,2,1,8,7,6} },
{ 29,{0,1,2},{2,0,1,5,3,4,8,6,7},{1,2,0,4,5,3,7,8,6} },
{ 29,{0,1,2},{1,2,0,4,5,3,7,8,6},{2,0,1,5,3,4,8,6,7} },
{ 29,{0,2,1},{0,2,1,6,8,7,3,5,4},{0,2,1,6,8,7,3,5,4} },
{ 29,{0,2,1},{1,0,2,7,6,8,4,3,5},{1,0,2,7,6,8,4,3,5} },
{ 29,{0,2,1},{2,1,0,8,7,6,5,4,3},{2,1,0,8,7,6,5,4,3} },
{ 29,{2,0,1},{3,4,5,6,7,8,0,1,2},{1,2,0,3,4,5,6,7,8} },
{ 29,{2,0,1},{5,3,4,8,6,7,2,0,1},{2,0,1,4,5,3,7,8,6} },
{ 29,{2,0,1},{4,5,3,7,8,6,1,2,0},{0,1,2,5,3,4,8,6,7} },
{ 29,{2,1,0},{3,5,4,0,2,1,6,8,7},{2,1,0,6,8,7,3,5,4} },
{ 29,{2,1,0},{4,3,5,1,0,2,7,6,8},{0,2,1,7,6,8,4,3,5} },
{ 29,{2,1,0},{5,4,3,2,1,0,8,7,6},{1,0,2,8,7,6,5,4,3} },
{ 29,{1,0,2},{6,8,7,3,5,4,0,2,1},{1,0,2,6,8,7,3,5,4} },
{ 29,{1,0,2},{7,6,8,4,3,5,1,0,2},{2,1,0,7,6,8,4,3,5} },
{ 29,{1,0,2},{8,7,6,5,4,3,2,1,0},{0,2,1,8,7,6,5,4,3} },
{ 29,{1,2,0},{6,7,8,0,1,2,3,4,5},{2,0,1,3,4,5,6,7,8} },
{ 29,{1,2,0},{8,6,7,2,0,1,5,3,4},{0,1,2,4,5,3,7,8,6} },
{ 29,{1,2,0},{7,8,6,1,2,0,4,5,3},{1,2,0,5,3,4,8,6,7} },
{ 30,{0,2,1},{1,0,2,8,6,7,4,5,3},{1,0,2,8,6,7,4,5,3} },
{ 30,{1,0,2},{5,4,3,2,1,0,7,6,8},{8,7,6,5,4,3,2,1,0} },
{ 30,{1,2,0},{4,5,3,8,7,6,1,0,2},{3,5,4,7,6,8,2,0,1} },
{ 30,{2,0,1},{7,6,8,2,0,1,5,4,3},{7,8,6,0,2,1,4,3,5} },
{ 30,{2,1,0},{6,7,8,3,5,4,0,1,2},{5,3,4,1,2,0,6,8,7} },
{ 31,{2,1,0},{6,7,8,3,4,5,0,1,2},{0,3,4,1,2,6,5,7,8} },
{ 35,{2,1,0},{5,4,3,2,1,0,7,6,8},{6,2,1,8,7,5,0,4,3} },
{ 40,{1,0,2},{8,7,6,5,4,3,2,1,0},{5,2,1,8,7,0,6,4,3} },
{ 44,{2,1,0},{5,4,3,2,1,0,6,7,8},{6,1,2,8,7,5,0,4,3} },
{ 52,{1,0,2},{8,7,6,5,4,3,2,1,0},{5,2,1,8,7,0,6,4,3} },
{ 53,{2,1,0},{0,1,2,8,6,7,4,5,3},{5,7,8,3,4,0,6,1,2} },
{ 66,{2,1,0},{0,1,2,8,7,6,5,4,3},{5,8,7,3,4,0,6,2,1} },
{ 70,{2,1,0},{6,7,8,3,5,4,0,1,2},{0,3,4,1,2,6,5,8,7} },
{ 74,{1,0,2},{8,7,6,5,4,3,2,1,0},{5,2,1,8,7,0,6,4,3} },
{ 83,{1,0,2},{8,7,6,5,4,3,2,1,0},{5,2,1,8,7,0,6,4,3} },
{ 96,{1,0,2},{8,7,6,5,4,3,2,1,0},{5,2,1,8,7,0,6,4,3} },
{ 97,{0,2,1},{0,2,1,7,8,6,5,3,4},{0,2,1,7,8,6,5,3,4} },
{ 100,{2,1,0},{7,6,8,3,4,5,1,0,2},{0,4,3,2,1,6,5,7,8} },
{ 103,{2,1,0},{1,0,2,8,6,7,4,5,3},{5,7,8,4,3,0,6,1,2} },
{ 103,{0,2,1},{5,3,4,1,2,0,6,8,7},{5,3,4,1,2,0,6,8,7} },
{ 103,{1,2,0},{3,5,4,7,6,8,2,0,1},{0,4,3,7,8,5,6,2,1} },
{ 103,{1,0,2},{8,7,6,5,4,3,2,1,0},{5,2,1,8,7,0,6,4,3} },
{ 103,{2,0,1},{7,8,6,0,2,1,4,3,5},{0,8,7,2,1,5,6,3,4} },
{ 113,{1,0,2},{8,7,6,5,4,3,2,1,0},{5,2,1,8,7,0,6,4,3} },
{ 119,{1,0,2},{8,7,6,5,4,3,2,1,0},{5,2,1,8,7,0,6,4,3} },
{ 121,{0,2,1},{0,1,2,7,8,6,5,3,4},{0,1,2,7,8,6,5,3,4} },
{ 123,{0,2,1},{5,4,3,2,1,0,6,8,7},{5,4,3,2,1,0,6,8,7} },
{ 128,{1,0,2},{8,7,6,5,4,3,2,1,0},{5,2,1,8,7,0,6,4,3} },
{ 132,{1,2,0},{2,0,1,4,5,3,8,6,7},{5,7,8,1,2,6,0,3,4} },
{ 132,{2,0,1},{1,2,0,5,3,4,7,8,6},{6,3,4,7,8,0,5,1,2} },
{ 132,{0,2,1},{6,8,7,4,3,5,0,2,1},{6,8,7,4,3,5,0,2,1} },
{ 132,{1,0,2},{8,7,6,5,4,3,2,1,0},{5,2,1,8,7,0,6,4,3} },
{ 132,{2,1,0},{7,6,8,3,5,4,1,0,2},{0,4,3,2,1,6,5,8,7} },
{ 136,{1,0,2},{8,7,6,5,4,3,2,1,0},{5,2,1,8,7,0,6,4,3} },
{ 138,{1,0,2},{8,7,6,5,4,3,2,1,0},{5,2,1,8,7,0,6,4,3} },
{ 141,{2,1,0},{5,4,3,2,1,0,8,7,6},{6,2,1,8,7,5,0,4,3} },
{ 143,{2,1,0},{6,8,7,3,5,4,0,2,1},{0,3,4,1,2,6,5,8,7} },
{ 147,{2,1,0},{0,1,2,7,6,8,4,3,5},{5,7,8,3,4,0,6,1,2} },
{ 148,{2,1,0},{5,4,3,2,1,0,6,7,8},{6,1,2,8,7,5,0,4,3} },
{ 166,{2,1,0},{6,8,7,3,4,5,0,2,1},{0,3,4,1,2,6,5,7,8} },
{ 174,{2,1,0},{0,1,2,7,8,6,5,3,4},{5,8,7,3,4,0,6,2,1} },
{ 189,{2,1,0},{1,0,2,7,6,8,4,3,5},{5,7,8,4,3,0,6,1,2} },
{ 209,{2,1,0},{1,0,2,7,8,6,5,3,4},{5,8,7,4,3,0,6,2,1} },
{ 212,{2,1,0},{8,6,7,3,4,5,1,2,0},{0,4,3,2,1,6,5,7,8} },
{ 213,{2,1,0},{4,5,3,2,0,1,6,7,8},{6,1,2,7,8,5,0,3,4} },
{ 218,{2,1,0},{5,4,3,2,1,0,7,6,8},{6,2,1,8,7,5,0,4,3} },
{ 223,{2,1,0},{0,1,2,8,7,6,5,4,3},{5,7,8,3,4,0,6,1,2} },
{ 223,{0,1,2},{5,4,3,8,7,6,0,1,2},{6,7,8,2,1,0,5,4,3} },
{ 223,{2,1,0},{5,4,3,2,1,0,6,7,8},{6,1,2,8,7,5,0,4,3} },
{ 223,{0,1,2},{6,7,8,2,1,0,5,4,3},{5,4,3,8,7,6,0,1,2} },
{ 223,{2,1,0},{6,7,8,3,4,5,0,1,2},{0,4,3,2,1,6,5,7,8} },
{ 234,{0,1,2},{5,4,3,8,7,6,0,1,2},{6,7,8,2,1,0,5,4,3} },
{ 234,{0,1,2},{6,7,8,2,1,0,5,4,3},{5,4,3,8,7,6,0,1,2} },
{ 236,{2,1,0},{0,1,2,8,6,7,4,5,3},{5,8,7,3,4,0,6,2,1} },
{ 239,{0,2,1},{0,2,1,7,8,6,5,3,4},{0,2,1,7,8,6,5,3,4} },
{ 239,{0,1,2},{5,4,3,8,7,6,0,1,2},{6,7,8,2,1,0,5,4,3} },
{ 239,{0,2,1},{5,3,4,1,2,0,6,8,7},{5,3,4,1,2,0,6,8,7} },
{ 239,{0,1,2},{6,7,8,2,1,0,5,4,3},{5,4,3,8,7,6,0,1,2} },
{ 239,{0,2,1},{6,8,7,4,3,5,0,2,1},{6,8,7,4,3,5,0,2,1} },
{ 240,{2,1,0},{5,4,3,2,1,0,6,8,7},{6,2,1,8,7,5,0,4,3} },
{ 244,{0,2,1},{6,7,8,4,3,5,0,1,2},{6,7,8,4,3,5,0,1,2} },
{ 246,{2,1,0},{5,4,3,2,1,0,6,7,8},{6,1,2,8,7,5,0,4,3} },
{ 249,{0,2,1},{6,8,7,4,3,5,0,2,1},{6,8,7,4,3,5,0,2,1} },
{ 250,{1,0,2},{3,4,5,0,1,2,6,7,8},{0,7,8,3,4,6,5,1,2} },
{ 251,{1,0,2},{3,4,5,0,1,2,6,7,8},{0,7,8,3,4,6,5,1,2} },
{ 252,{1,0,2},{3,4,5,0,1,2,6,7,8},{0,7,8,3,4,6,5,1,2} },
{ 253,{2,1,0},{0,1,2,6,7,8,3,4,5},{5,7,8,3,4,0,6,1,2} },
{ 253,{1,0,2},{3,4,5,0,1,2,6,7,8},{0,7,8,3,4,6,5,1,2} },
{ 253,{2,0,1},{3,4,5,6,7,8,0,1,2},{5,1,2,3,4,6,0,7,8} },
{ 253,{0,2,1},{6,7,8,3,4,5,0,1,2},{6,7,8,3,4,5,0,1,2} },
{ 253,{1,2,0},{6,7,8,0,1,2,3,4,5},{6,1,2,3,4,0,5,7,8} },
{ 254,{1,0,2},{3,4,5,0,1,2,6,7,8},{0,7,8,3,4,6,5,1,2} },
{ 255,{1,0,2},{3,4,5,0,1,2,6,7,8},{0,7,8,3,4,6,5,1,2} },
{ 258,{0,2,1},{6,8,7,3,4,5,0,2,1},{6,8,7,3,4,5,0,2,1} },
{ 272,{1,0,2},{3,4,5,0,1,2,6,7,8},{0,7,8,3,4,6,5,1,2} },
{ 273,{1,0,2},{3,4,5,0,1,2,6,7,8},{0,7,8,3,4,6,5,1,2} },
{ 274,{1,0,2},{3,4,5,0,1,2,6,7,8},{0,7,8,3,4,6,5,1,2} },
{ 275,{1,0,2},{3,4,5,0,1,2,6,7,8},{0,7,8,3,4,6,5,1,2} },
{ 276,{1,0,2},{3,4,5,0,1,2,6,7,8},{0,7,8,3,4,6,5,1,2} },
{ 278,{1,0,2},{3,4,5,0,1,2,6,7,8},{0,7,8,3,4,6,5,1,2} },
{ 279,{1,0,2},{3,4,5,0,1,2,6,7,8},{0,7,8,3,4,6,5,1,2} },
{ 280,{1,0,2},{3,4,5,0,1,2,6,7,8},{0,7,8,3,4,6,5,1,2} },
{ 283,{0,2,1},{5,3,4,1,2,0,6,8,7},{5,3,4,1,2,0,6,8,7} },
{ 284,{1,0,2},{3,4,5,0,1,2,6,7,8},{0,7,8,3,4,6,5,1,2} },
{ 285,{1,0,2},{3,4,5,0,1,2,6,7,8},{0,7,8,3,4,6,5,1,2} },
{ 286,{1,0,2},{3,4,5,0,1,2,6,7,8},{0,7,8,3,4,6,5,1,2} },
{ 287,{1,0,2},{3,4,5,0,1,2,6,7,8},{0,7,8,3,4,6,5,1,2} },
{ 288,{0,2,1},{0,1,2,7,8,6,5,3,4},{0,1,2,7,8,6,5,3,4} },
{ 288,{1,0,2},{3,4,5,0,1,2,6,7,8},{0,7,8,3,4,6,5,1,2} },
{ 288,{1,2,0},{3,4,5,7,8,6,2,0,1},{0,3,4,7,8,5,6,1,2} },
{ 288,{2,0,1},{7,8,6,0,1,2,5,3,4},{0,7,8,1,2,5,6,3,4} },
{ 288,{2,1,0},{7,8,6,3,4,5,2,0,1},{0,3,4,1,2,6,5,7,8} },
{ 289,{1,0,2},{3,4,5,0,1,2,6,7,8},{0,7,8,3,4,6,5,1,2} },
{ 297,{2,1,0},{8,7,6,3,5,4,2,1,0},{0,4,3,2,1,6,5,8,7} },
{ 301,{1,2,0},{2,0,1,4,5,3,6,7,8},{5,7,8,1,2,6,0,3,4} },
{ 301,{2,0,1},{1,2,0,5,3,4,6,7,8},{6,3,4,7,8,0,5,1,2} },
{ 301,{0,2,1},{5,3,4,1,2,0,6,7,8},{5,3,4,1,2,0,6,7,8} },
{ 301,{1,0,2},{3,4,5,0,1,2,6,7,8},{0,7,8,3,4,6,5,1,2} },
{ 301,{2,1,0},{4,5,3,2,0,1,6,7,8},{6,1,2,7,8,5,0,3,4} },
{ 302,{1,0,2},{3,4,5,0,1,2,6,7,8},{0,7,8,3,4,6,5,1,2} },
{ 303,{1,0,2},{3,4,5,0,1,2,6,7,8},{0,7,8,3,4,6,5,1,2} },
{ 304,{1,0,2},{3,4,5,0,1,2,6,7,8},{0,7,8,3,4,6,5,1,2} },
{ 305,{1,0,2},{3,4,5,0,1,2,6,7,8},{0,7,8,3,4,6,5,1,2} },
{ 306,{0,2,1},{0,1,2,8,7,6,5,4,3},{0,1,2,8,7,6,5,4,3} },
{ 306,{1,0,2},{3,4,5,0,1,2,6,7,8},{0,7,8,3,4,6,5,1,2} },
{ 306,{1,2,0},{3,4,5,8,7,6,2,1,0},{0,4,3,8,7,5,6,1,2} },
{ 306,{2,0,1},{8,7,6,0,1,2,5,4,3},{0,7,8,2,1,5,6,4,3} },
{ 306,{2,1,0},{8,7,6,3,4,5,2,1,0},{0,4,3,2,1,6,5,7,8} },
{ 307,{1,0,2},{3,4,5,0,1,2,6,7,8},{0,7,8,3,4,6,5,1,2} },
{ 308,{1,0,2},{3,4,5,0,1,2,6,7,8},{0,7,8,3,4,6,5,1,2} },
{ 309,{2,1,0},{5,4,3,2,1,0,6,8,7},{6,2,1,8,7,5,0,4,3} },
{ 313,{2,1,0},{5,4,3,2,1,0,6,7,8},{6,1,2,8,7,5,0,4,3} },
{ 333,{0,2,1},{5,3,4,1,2,0,6,8,7},{5,3,4,1,2,0,6,8,7} },
{ 345,{0,2,1},{0,2,1,8,7,6,5,4,3},{0,2,1,8,7,6,5,4,3} },
{ 347,{0,2,1},{2,1,0,8,7,6,5,4,3},{2,1,0,8,7,6,5,4,3} },
{ 347,{1,0,2},{0,2,1,6,8,7,3,5,4},{3,6,4,0,2,5,1,8,7} },
{ 347,{1,2,0},{1,2,0,4,5,3,7,8,6},{8,5,7,2,0,6,1,3,4} },
{ 347,{2,0,1},{2,0,1,5,3,4,8,6,7},{4,6,3,7,8,1,5,2,0} },
{ 347,{2,1,0},{1,0,2,7,6,8,4,3,5},{7,5,8,4,3,1,6,0,2} },
{ 347,{0,1,2},{4,5,3,7,8,6,1,2,0},{8,6,7,2,0,1,5,3,4} },
{ 347,{0,2,1},{3,5,4,0,2,1,6,8,7},{3,5,4,0,2,1,6,8,7} },
{ 347,{1,0,2},{4,3,5,1,0,2,7,6,8},{7,1,8,4,3,6,5,0,2} },
{ 347,{1,2,0},{5,3,4,8,6,7,2,0,1},{4,1,3,7,8,5,6,2,0} },
{ 347,{2,0,1},{3,4,5,6,7,8,0,1,2},{0,5,2,3,4,6,1,7,8} },
{ 347,{2,1,0},{5,4,3,2,1,0,8,7,6},{2,6,0,8,7,5,1,4,3} },
{ 347,{0,1,2},{8,6,7,2,0,1,5,3,4},{4,5,3,7,8,6,1,2,0} },
{ 347,{0,2,1},{7,6,8,4,3,5,1,0,2},{7,6,8,4,3,5,1,0,2} },
{ 347,{1,0,2},{8,7,6,5,4,3,2,1,0},{2,5,0,8,7,1,6,4,3} },
{ 347,{1,2,0},{6,7,8,0,1,2,3,4,5},{0,6,2,3,4,1,5,7,8} },
{ 347,{2,0,1},{7,8,6,1,2,0,4,5,3},{8,1,7,2,0,5,6,3,4} },
{ 347,{2,1,0},{6,8,7,3,5,4,0,2,1},{3,1,4,0,2,6,5,8,7} },
{ 348,{1,0,2},{0,2,1,6,8,7,3,5,4},{3,6,4,0,2,5,1,8,7} },
{ 349,{1,0,2},{0,2,1,6,8,7,3,5,4},{3,6,4,0,2,5,1,8,7} },
{ 351,{2,1,0},{1,0,2,7,8,6,5,3,4},{8,5,7,4,3,1,6,2,0} },
{ 352,{1,0,2},{0,2,1,6,8,7,3,5,4},{3,6,4,0,2,5,1,8,7} },
{ 353,{1,0,2},{0,2,1,6,8,7,3,5,4},{3,6,4,0,2,5,1,8,7} },
{ 358,{0,2,1},{0,1,2,7,8,6,5,3,4},{0,1,2,7,8,6,5,3,4} },
{ 358,{0,1,2},{4,5,3,7,8,6,1,2,0},{8,6,7,2,0,1,5,3,4} },
{ 358,{0,2,1},{4,5,3,2,0,1,6,7,8},{4,5,3,2,0,1,6,7,8} },
{ 358,{0,1,2},{8,6,7,2,0,1,5,3,4},{4,5,3,7,8,6,1,2,0} },
{ 358,{0,2,1},{8,6,7,3,4,5,1,2,0},{8,6,7,3,4,5,1,2,0} },
{ 359,{2,1,0},{5,4,3,2,1,0,6,8,7},{2,6,0,8,7,5,1,4,3} },
{ 374,{0,2,1},{4,5,3,2,0,1,6,7,8},{4,5,3,2,0,1,6,7,8} },
{ 376,{2,1,0},{4,5,3,2,0,1,6,8,7},{2,6,0,7,8,5,1,3,4} },
{ 379,{1,2,0},{1,2,0,4,5,3,6,7,8},{8,5,7,2,0,6,1,3,4} },
{ 379,{2,0,1},{2,0,1,5,3,4,6,7,8},{4,6,3,7,8,1,5,2,0} },
{ 379,{0,2,1},{3,5,4,0,2,1,6,8,7},{3,5,4,0,2,1,6,8,7} },
{ 379,{1,0,2},{4,3,5,1,0,2,6,8,7},{7,1,8,4,3,6,5,0,2} },
{ 379,{2,1,0},{5,4,3,2,1,0,6,8,7},{2,6,0,8,7,5,1,4,3} },
{ 382,{1,0,2},{4,3,5,1,0,2,6,8,7},{7,1,8,4,3,6,5,0,2} },
{ 383,{1,0,2},{4,3,5,1,0,2,6,8,7},{7,1,8,4,3,6,5,0,2} },
{ 388,{1,2,0},{4,3,5,7,8,6,2,1,0},{4,1,3,8,7,5,6,0,2} },
{ 388,{2,0,1},{8,7,6,1,0,2,5,3,4},{7,1,8,2,0,5,6,4,3} },
{ 389,{1,0,2},{4,3,5,1,0,2,6,8,7},{7,1,8,4,3,6,5,0,2} },
{ 390,{1,0,2},{4,3,5,1,0,2,6,8,7},{7,1,8,4,3,6,5,0,2} },
{ 391,{0,2,1},{4,5,3,2,0,1,6,7,8},{4,5,3,2,0,1,6,7,8} },
{ 392,{2,1,0},{4,5,3,2,0,1,6,8,7},{2,6,0,7,8,5,1,3,4} },
{ 393,{1,0,2},{4,3,5,1,0,2,6,8,7},{7,1,8,4,3,6,5,0,2} },
{ 394,{1,0,2},{4,3,5,1,0,2,6,8,7},{7,1,8,4,3,6,5,0,2} },
{ 395,{1,0,2},{4,3,5,1,0,2,6,8,7},{7,1,8,4,3,6,5,0,2} },
{ 396,{1,0,2},{4,3,5,1,0,2,6,8,7},{7,1,8,4,3,6,5,0,2} },
{ 397,{2,1,0},{7,8,6,3,4,5,2,0,1},{3,4,2,0,1,6,5,7,8} },
{ 399,{1,0,2},{8,7,6,5,4,3,2,1,0},{1,0,5,8,7,2,6,4,3} },
{ 400,{0,2,1},{7,8,6,4,3,5,2,0,1},{7,8,6,4,3,5,2,0,1} },
{ 403,{1,2,0},{0,1,2,4,5,3,6,7,8},{7,8,5,0,1,6,2,3,4} },
{ 403,{2,0,1},{0,1,2,5,3,4,6,7,8},{3,4,6,7,8,2,5,0,1} },
{ 403,{0,2,1},{8,7,6,4,3,5,2,1,0},{8,7,6,4,3,5,2,1,0} },
{ 403,{1,0,2},{8,7,6,5,4,3,2,1,0},{1,0,5,8,7,2,6,4,3} },
{ 403,{2,1,0},{8,7,6,3,5,4,2,1,0},{4,3,2,1,0,6,5,8,7} },
{ 406,{0,2,1},{8,7,6,3,4,5,2,1,0},{8,7,6,3,4,5,2,1,0} },
{ 407,{1,0,2},{8,7,6,5,4,3,2,1,0},{1,0,5,8,7,2,6,4,3} },
{ 410,{2,1,0},{7,8,6,3,4,5,2,0,1},{4,3,2,1,0,6,5,7,8} },
{ 411,{2,1,0},{8,7,6,3,4,5,2,1,0},{3,4,2,0,1,6,5,7,8} },
{ 412,{0,1,2},{1,0,2,4,3,5,6,8,7},{1,0,2,4,3,5,6,8,7} },
{ 412,{0,2,1},{0,1,2,7,8,6,5,3,4},{0,1,2,7,8,6,5,3,4} },
{ 412,{0,2,1},{1,0,2,8,7,6,5,4,3},{1,0,2,8,7,6,5,4,3} },
{ 412,{1,0,2},{0,1,2,7,8,6,5,3,4},{3,4,6,0,1,5,2,7,8} },
{ 412,{1,0,2},{1,0,2,8,7,6,5,4,3},{4,3,6,1,0,5,2,8,7} },
{ 412,{1,2,0},{0,1,2,3,4,5,6,7,8},{7,8,5,0,1,6,2,3,4} },
{ 412,{1,2,0},{1,0,2,4,3,5,6,8,7},{8,7,5,1,0,6,2,4,3} },
{ 412,{2,0,1},{0,1,2,3,4,5,6,7,8},{3,4,6,7,8,2,5,0,1} },
{ 412,{2,0,1},{1,0,2,4,3,5,6,8,7},{4,3,6,8,7,2,5,1,0} },
{ 412,{2,1,0},{0,1,2,7,8,6,5,3,4},{7,8,5,3,4,2,6,0,1} },
{ 412,{2,1,0},{1,0,2,8,7,6,5,4,3},{8,7,5,4,3,2,6,1,0} },
{ 412,{0,1,2},{3,4,5,7,8,6,2,0,1},{7,8,6,0,1,2,5,3,4} },
{ 412,{0,1,2},{4,3,5,8,7,6,2,1,0},{8,7,6,1,0,2,5,4,3} },
{ 412,{0,2,1},{3,4,5,0,1,2,6,7,8},{3,4,5,0,1,2,6,7,8} },
{ 412,{0,2,1},{4,3,5,1,0,2,6,8,7},{4,3,5,1,0,2,6,8,7} },
{ 412,{1,0,2},{3,4,5,0,1,2,6,7,8},{7,8,2,3,4,6,5,0,1} },
{ 412,{1,0,2},{4,3,5,1,0,2,6,8,7},{8,7,2,4,3,6,5,1,0} },
{ 412,{1,2,0},{3,4,5,7,8,6,2,0,1},{3,4,2,7,8,5,6,0,1} },
{ 412,{1,2,0},{4,3,5,8,7,6,2,1,0},{4,3,2,8,7,5,6,1,0} },
{ 412,{2,0,1},{3,4,5,7,8,6,2,0,1},{0,1,5,3,4,6,2,7,8} },
{ 412,{2,0,1},{4,3,5,8,7,6,2,1,0},{1,0,5,4,3,6,2,8,7} },
{ 412,{2,1,0},{3,4,5,0,1,2,6,7,8},{0,1,6,7,8,5,2,3,4} },
{ 412,{2,1,0},{4,3,5,1,0,2,6,8,7},{1,0,6,8,7,5,2,4,3} },
{ 412,{0,1,2},{7,8,6,0,1,2,5,3,4},{3,4,5,7,8,6,2,0,1} },
{ 412,{0,1,2},{8,7,6,1,0,2,5,4,3},{4,3,5,8,7,6,2,1,0} },
{ 412,{0,2,1},{7,8,6,3,4,5,2,0,1},{7,8,6,3,4,5,2,0,1} },
{ 412,{0,2,1},{8,7,6,4,3,5,2,1,0},{8,7,6,4,3,5,2,1,0} },
{ 412,{1,0,2},{7,8,6,3,4,5,2,0,1},{0,1,5,7,8,2,6,3,4} },
{ 412,{1,0,2},{8,7,6,4,3,5,2,1,0},{1,0,5,8,7,2,6,4,3} },
{ 412,{1,2,0},{7,8,6,0,1,2,5,3,4},{0,1,6,3,4,2,5,7,8} },
{ 412,{1,2,0},{8,7,6,1,0,2,5,4,3},{1,0,6,4,3,2,5,8,7} },
{ 412,{2,0,1},{7,8,6,0,1,2,5,3,4},{7,8,2,0,1,5,6,3,4} },
{ 412,{2,0,1},{8,7,6,1,0,2,5,4,3},{8,7,2,1,0,5,6,4,3} },
{ 412,{2,1,0},{7,8,6,3,4,5,2,0,1},{3,4,2,0,1,6,5,7,8} },
{ 412,{2,1,0},{8,7,6,4,3,5,2,1,0},{4,3,2,1,0,6,5,8,7} },
{ 413,{0,1,2},{1,0,2,4,3,5,6,8,7},{1,0,2,4,3,5,6,8,7} },
{ 413,{1,0,2},{3,4,5,0,1,2,6,7,8},{7,8,2,3,4,6,5,0,1} },
{ 413,{1,0,2},{4,3,5,1,0,2,6,8,7},{8,7,2,4,3,6,5,1,0} },
{ 414,{0,1,2},{1,0,2,4,3,5,6,8,7},{1,0,2,4,3,5,6,8,7} },
{ 414,{1,0,2},{0,1,2,7,8,6,5,3,4},{3,4,6,0,1,5,2,7,8} },
{ 414,{1,0,2},{1,0,2,8,7,6,5,4,3},{4,3,6,1,0,5,2,8,7} },
{ 414,{1,2,0},{3,4,5,8,7,6,2,0,1},{4,3,2,7,8,5,6,0,1} },
{ 414,{1,2,0},{4,3,5,7,8,6,2,1,0},{3,4,2,8,7,5,6,1,0} },
{ 414,{2,1,0},{3,4,5,0,1,2,6,8,7},{1,0,6,7,8,5,2,3,4} },
{ 414,{2,1,0},{4,3,5,1,0,2,6,7,8},{0,1,6,8,7,5,2,4,3} },
{ 414,{0,2,1},{7,8,6,4,3,5,2,0,1},{7,8,6,4,3,5,2,0,1} },
{ 414,{0,2,1},{8,7,6,3,4,5,2,1,0},{8,7,6,3,4,5,2,1,0} },
{ 414,{2,0,1},{7,8,6,0,1,2,5,4,3},{7,8,2,1,0,5,6,3,4} },
{ 414,{2,0,1},{8,7,6,1,0,2,5,3,4},{8,7,2,0,1,5,6,4,3} },
{ 415,{0,1,2},{1,0,2,4,3,5,6,8,7},{1,0,2,4,3,5,6,8,7} },
{ 415,{1,0,2},{0,1,2,7,8,6,5,3,4},{3,4,6,0,1,5,2,7,8} },
{ 415,{1,0,2},{1,0,2,8,7,6,5,4,3},{4,3,6,1,0,5,2,8,7} },
{ 415,{0,1,2},{3,4,5,7,8,6,2,0,1},{7,8,6,0,1,2,5,3,4} },
{ 415,{0,1,2},{4,3,5,8,7,6,2,1,0},{8,7,6,1,0,2,5,4,3} },
{ 415,{1,0,2},{3,4,5,0,1,2,6,7,8},{7,8,2,3,4,6,5,0,1} },
{ 415,{1,0,2},{4,3,5,1,0,2,6,8,7},{8,7,2,4,3,6,5,1,0} },
{ 415,{0,1,2},{7,8,6,0,1,2,5,3,4},{3,4,5,7,8,6,2,0,1} },
{ 415,{0,1,2},{8,7,6,1,0,2,5,4,3},{4,3,5,8,7,6,2,1,0} },
{ 415,{1,0,2},{7,8,6,3,4,5,2,0,1},{0,1,5,7,8,2,6,3,4} },
{ 415,{1,0,2},{8,7,6,4,3,5,2,1,0},{1,0,5,8,7,2,6,4,3} },
 };
char tblnauto[416] = {
107 , 3 , 5 , 11 , 1 , 0 , 5 , 17 , 11 , 1 , 1 , 1 , 5 , 1 , 1 , 53 ,
5 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 17 , 1 , 17 , 17 , 5 , 1 ,
0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 ,
0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
1 , 1 , 0 , 0 , 1 , 0 , 0 , 5 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 0 , 0 ,
1 , 0 , 0 , 0 , 5 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 1 ,
0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 5 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 2 , 0 , 1 , 0 , 0 , 5 ,
1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 1 , 1 , 5 , 1 , 1 ,
0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 1 , 1 , 1 , 1 ,
5 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 5 , 1 , 1 ,
1 , 1 , 5 , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 17 , 1 , 1 , 0 , 1 ,
1 , 1 , 0 , 0 , 0 , 0 , 5 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 5 , 0 , 0 , 1 , 1 ,
0 , 0 , 0 , 0 , 2 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 ,
1 , 0 , 0 , 5 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 35 , 3 , 11 , 11 ,
};
uint16_t tblnautostart[416] = {
0 , 107 , 110 , 115 , 126 , 0 , 127 , 132 , 149 , 160 , 161 , 162 , 163 , 168 , 169 , 170 ,
223 , 228 , 229 , 0 , 230 , 0 , 231 , 0 , 232 , 233 , 234 , 251 , 252 , 269 , 286 , 291 ,
0 , 0 , 0 , 292 , 0 , 0 , 0 , 0 , 293 , 0 , 0 , 0 , 294 , 0 , 0 , 0 ,
0 , 0 , 0 , 0 , 295 , 296 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 297 , 0 , 0 , 0 , 298 , 0 , 0 , 0 , 299 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 300 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
301 , 302 , 0 , 0 , 303 , 0 , 0 , 304 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 309 , 0 , 0 , 0 , 0 , 0 , 310 , 0 , 311 , 0 , 312 , 0 , 0 , 0 , 0 ,
313 , 0 , 0 , 0 , 314 , 0 , 0 , 0 , 319 , 0 , 320 , 0 , 0 , 321 , 0 , 322 ,
0 , 0 , 0 , 323 , 324 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 325 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 326 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 327 , 0 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 328 , 0 , 0 , 329 , 330 , 0 , 0 , 0 , 0 , 331 , 0 , 0 , 0 , 0 , 332 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 337 , 0 , 339 , 0 , 0 , 340 ,
345 , 0 , 0 , 0 , 346 , 0 , 347 , 0 , 0 , 348 , 349 , 350 , 351 , 352 , 357 , 358 ,
0 , 0 , 359 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
360 , 361 , 362 , 363 , 364 , 0 , 365 , 366 , 367 , 0 , 0 , 368 , 369 , 370 , 371 , 372 ,
373 , 378 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 379 , 0 , 0 , 0 , 380 , 385 , 386 ,
387 , 388 , 389 , 394 , 395 , 396 , 0 , 0 , 0 , 397 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 398 , 0 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 399 , 0 , 400 , 417 , 418 , 0 , 419 ,
420 , 421 , 0 , 0 , 0 , 0 , 422 , 427 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
0 , 0 , 0 , 0 , 0 , 0 , 428 , 0 , 429 , 0 , 0 , 430 , 0 , 0 , 435 , 436 ,
0 , 0 , 0 , 0 , 437 , 439 , 440 , 441 , 442 , 443 , 444 , 445 , 446 , 447 , 0 , 448 ,
449 , 0 , 0 , 450 , 0 , 0 , 455 , 456 , 0 , 0 , 457 , 458 , 459 , 494 , 497 , 508 ,
};

//=============  get the permutation mode for a given band

int GetI416_L16(char * ze){
	int c1 = *ze,i1,i2,isk;
	ze++;
	//cout << "c1=" << (char)c1 << endl;
	if (c1 == '7'){// 7189 or 7289 or 7389 or 7893 612
		if (strncmp(ze, "189", 3) == 0){// 236_31 263_139 326_217 623_236 632_309
			ze += 3;
			isk = 7;
			if (strncmp(ze, "236", 3) == 0)			{ ze += 3; i1 = 31; i2 = 139;  goto com; }
			else	if (strncmp(ze, "263", 3) == 0)	{ ze += 3; i1 = 139; i2 = 217;  goto com; }
			else	if (strncmp(ze, "326", 3) == 0)	{ ze += 3; i1 = 217; i2 = 240;  goto com; }
			else	if (strncmp(ze, "623", 3) == 0)	{ ze += 3; i1 = 240; i2 = 309;  goto com; }
			else	if (strncmp(ze, "632", 3) == 0)	{ ze += 3; i1 = 309; i2 = 347;  goto com; }
			else return -1;
		}

		else if (strncmp(ze, "289", 3) == 0){//163 613 631 
			ze += 3;
			isk = 7;
			if (strncmp(ze, "163", 3) == 0)			{ ze += 3; i1 = 347; i2 = 359;  goto com; }
			else if (strncmp(ze, "613", 3) == 0)	{ ze += 3; i1 = 359; i2 = 379;  goto com; }
			else if (strncmp(ze, "631", 3) == 0)	{ ze += 3; i1 = 379; i2 = 397;  goto com; }
			else return -1;
		}
		else if (strncmp(ze, "389", 3) == 0){ ze += 3; i1 = 397; i2 = 412; isk = 4; goto com; }
		else if (strncmp(ze, "893612", 6) == 0){ ze+=6;	i1 = 412; i2 = 416; isk = 7; goto com; }
		else return -1;
	}
	else if (c1 == '6'){
		if (strncmp(ze, "789", 3))return -1;
		ze += 3;
		int c2 = *ze;
		isk = 4;
		//cout << "ok 6789 c2=" <<(char) c2<< endl;
		if (c2 == '1'){ i1 = 0; i2 = 26; goto com; }
		else if (c2 == '2'){ i1 = 26; i2 = 31; goto com; }
		else return - 1;
	}
	return -1;
com: 
	//cout << ze << "com " << endl;
	for (int i = i1; i < i2; i++){
		//cout << &t416[i][isk] << endl;
		int ir = strncmp(ze, &t416[i][isk], 16 - isk);
		if (!ir) return i;
		if (ir < 0) break;
	}
	return -1;
}
BANDMINLEX bandminlex;
void BANDMINLEX::MorphBox(int imbox, int ibox, int * rx, int * cx){
	int * mbox = box_morphed[imbox]; //box to fill
	// ibox rx cx all 0,1,2 relative morph 
	for (int i = 0, k = 0; i < 3; i++){// row in destination
		register int * minir = &band0[9 * rx[i] + 3 * ibox];
		for (int j = 0; j < 3; j++, k++){// col in destination
			mbox[k] = minir[cx[j]];
		}
	}
	if (0){
		cout << " morphed band " << imbox << " using box " << ibox << "  ";
		for (int i = 0; i < 9; i++)cout << mbox[i];
		cout << endl;
	}
}

void BANDMINLEX::SetPout(int iret){
	pout->i416 = iret;
	memcpy(pout->map, map, sizeof map);
	memcpy(pout->rows, rrx, sizeof pout->rows);
	for (int i = 0; i < 3; i++){
		pout->cols[i] = ccx[i] + 3 * bbx[0];
		pout->cols[i+3] = ccx2[i] + 3 * bbx[1];
		pout->cols[i + 6] = ccx3[i] + 3 * bbx[2];
	}

}

int BANDMINLEX::Getmin(int * b0,PERM * pout_user,int ediag){
	diag = 0;
	band0 = b0;
	pout = pout_user;
	// build minirows and minicols, check entry 
	memset(minirows, 0, sizeof minirows);
	for (int i = 0, k = 0; i < 9; i++){
		minirows[i] = 0;
		for (int j = 0; j < 3; j++, k++){
			register int c = b0[k];
			if (c < 0 || c>8) return -2; // not valid
			c = 1 << c; //switch to bit in bit field
			minirows[i] |= c;
		}
	}
	// check validity of the band 
	if ((minirows[0] | minirows[1] | minirows[2]) != 0x1ff) return -3;
	if ((minirows[3] | minirows[4] | minirows[5]) != 0x1ff) return -3;
	if ((minirows[6] | minirows[7] | minirows[8]) != 0x1ff) return -3;

	if ((minirows[0] == minirows[4]) || (minirows[0] == minirows[7]))
		return Getmin6();
	else return Getmin7();
}

int BANDMINLEX::Getmin6(){
	for (int ipb = 0; ipb < 6; ipb++){
		bbx = tperm6[ipb];
		for (int ipr = 0; ipr < 6; ipr++){
			rrx = tperm6[ipr];
			int mrx[3][3], *pmrx[3][3];
			for (int i = 0; i < 3; i++)for (int j = 0; j < 3; j++){
				register int iix;
				iix = 3 * rrx[i]+ bbx[j] ;
				mrx[i][j] = iix;
				pmrx[i][j] = &band0[3 * iix];
			}
			if (minirows[mrx[0][1]] - minirows[mrx[1][0]]) continue; // not good row box order
			for (int ipc = 0; ipc < 6; ipc++){
				ccx = tperm6[ipc], ccx2[3], ccx3[3];
				// set up col 345 order using minirow [1][0] order
				MorphBox(0, bbx[0], rrx, ccx); // morph box 1

				MorphBox(1, bbx[1], rrx, tperm6[0]);// premorph box 2
				PermCols(&box_morphed[0][3], box_morphed[1], ccx2);
				MorphBox(1, bbx[1], rrx, ccx2);// final morph box 2

				MorphBox(2, bbx[2], rrx, tperm6[0]);// premorph box 3
				PermCols(&box_morphed[1][3], box_morphed[2], ccx3);
				MorphBox(2, bbx[2], rrx, ccx3);// final morph box 2

				// map morphed row 1 to 123 456 789 using morphed boxes
				for (int i = 0, k = 0; i < 3; i++)
					for (int j = 0; j < 3; j++, k++){
						int c = box_morphed[i][j];
						map[c] = k;
					}
				// and map box_morphed[3][9] to box_mapped[3][9]
				for (int i = 0; i < 3; i++)
					for (int j = 0; j < 9; j++)
						box_mapped[i][j] = map[box_morphed[i][j]];
				// minirow morphed [1][2] possible 123 132 231 
				int r2c7 = box_mapped[2][3],
					r2c8 = box_mapped[2][4];
				if (!r2c8)continue;// no minimal solution if r2c8='1'
				if (r2c7 == 3)continue;// no minimal solution if r2c7='4'
				if (Getmin6_Switch()) return 1;
			}
		}
	}
	return -1;}
int BANDMINLEX::Getmin7(){// this is a 123456789 457 mode
	//cout << "Getmin7" << endl;
	if (diag)cout << "Getmin7()" << endl;
	for (int ipb = 0; ipb < 6; ipb++){
		bbx = tperm6[ipb];
		for (int ipr = 0; ipr < 6; ipr++){
			rrx = tperm6[ipr];
			int mrx[3][3], *pmrx[3][3];
			for (int i = 0; i < 3; i++)for (int j = 0; j < 3; j++){
				register int iix;
				iix = 3 * rrx[i] + bbx[j];
				mrx[i][j] = iix;
				pmrx[i][j] = &band0[3 * iix];
			}
			// must have 2 common digits r2c123 r1c456 (in fact r2c12 r1c456)
			if (_popcnt32(minirows[mrx[0][1]] & minirows[mrx[1][0]]) - 2) continue; // not good box order	
			//cout << "good box order" << " ipb=" << ipb << " ipr=" << ipr << endl;
			if (diag)cout << "ipb;ipr" << ipb << ipr << endl;
			for (int ipc = 0; ipc < 6; ipc++){
				ccx = tperm6[ipc], ccx2[3], ccx3[3];
				int c = pmrx[1][0][ccx[2]], bit = 1 << c; // this is r2c3
				if (bit&minirows[mrx[0][1]]) continue; // r2c3 must not belong to r1c456
				if (diag){
					cout << "cols perm=" << ipc << endl;
					cout << " mrx[0][1]=" << mrx[0][1] << " mrx[1][0]=" << mrx[1][0] << endl;
					cout << "c=" << c << " mini1=0" << oct << minirows[mrx[0][1]] << dec << endl;
					cout << "good for processing" << endl;
				}
				// set up col 345 order using minirow [1][0] order
				MorphBox(0, bbx[0], rrx, ccx); // morph box 1
				if (diag){
					cout << "morph box1 ";
					for (int i = 0; i < 9; i++) cout << box_morphed[0][i] + 1;
					cout << endl;
				}

				MorphBox(1, bbx[1], rrx, tperm6[0]);// premorph box 2
				if (diag){
					cout << "provisionnal morph box2 ";
					for (int i = 0; i < 9; i++) cout << box_morphed[1][i] + 1;
					cout << endl;
				}
				PermCols(&box_morphed[0][3], box_morphed[1], ccx2);
				MorphBox(1, bbx[1], rrx, ccx2);// final morph box 2
				if (diag){
					cout << "final morph box2 ";
					for (int i = 0; i < 9; i++) cout << box_morphed[1][i] + 1;
					cout << endl;
				}

				// possibles 7 189;289;389;893
				int c8 = box_morphed[1][3],bitr2c4 = 1 << c8  ;// c8 assumed r2c4

				if (!(bitr2c4&minirows[mrx[0][0]])){// not a digit from minirow 1
					if	(box_morphed[0][2] - box_morphed[1][5]) continue;// r1c3=r2c6					
				}
				else c8 = box_morphed[1][4]; //r2c5 will be 8 relabelled
				//cout << "good for processing band 3 c8="<<c8+1 << endl;

				MorphBox(2, bbx[2], rrx, tperm6[0]);// premorph box 3

				//Find columns perm for box 3 first is r2c3
				ccx3[2] = 3; // 0+1+2 sum of indexes
				for (int i = 0; i < 3; i++){// locate r2c3 in minirow 3
					if (box_morphed[0][5] == box_morphed[2][i]){
						ccx3[0] = i; ccx3[2] -= i; break;
					}
				}
				for (int i = 0; i < 3; i++){// locate now what must be r1c8
					if (c8 == box_morphed[2][i]){
						ccx3[1] = i; ccx3[2] -= i; break;
					}
				}

				MorphBox(2, bbx[2], rrx, ccx3);// final morph box 3
				if (diag){
					cout << "final morph box3 ";
					for (int i = 0; i < 9; i++) cout << box_morphed[2][i]+1;
					cout << endl;
				}

				// map morphed row 1 to 123 456 789 using morphed boxes
				for (int i = 0, k = 0; i < 3; i++)
					for (int j = 0; j < 3; j++, k++){
						int c = box_morphed[i][j];
						map[c] = k;
					}
				if (diag){
					cout << "map ";
					for (int i = 0; i < 9; i++) cout << map[i];
					cout << endl;
				}
				// and map box_morphed[3][9] to box_mapped[3][9]
				for (int i = 0; i < 3; i++)
					for (int j = 0; j < 9; j++)
						box_mapped[i][j] = map[box_morphed[i][j]];
				if (Getmin7_Switch()) return 1;
			}
		}
	}
	return -1;
}

int BANDMINLEX::CheckR3c49(int *ise){
	if(diag)cout << "check tindex=" << ise[0] << " " << ise[1] << endl;
	register int c4 = box_mapped[1][6] + '1', c5 = box_mapped[1][7] + '1',
		c7 = box_mapped[2][6] + '1', c8 = box_mapped[2][7] + '1';
//	cout << "c4;c5;c7;c8 " << (char)c4 << (char)c5 << (char)c7 << (char)c8 << endl;

	for (int i = ise[0]; i < ise[1]; i++){
		const register char * tt = t416[i];
		if (c4 == tt[10] && c5 == tt[11] &&	c7 == tt[13] && c8 == tt[14]){
			SetPout(i); 
			return 1;
		}
	}
	return 0;
}

int BANDMINLEX::Getmin6_Switch(){// this is a 123456789 456 mode morphed ok
	int r2c78 = (box_mapped[2][3]+1) * 10 + box_mapped[2][4]+1, //  as in the string
		r3c12 = (box_mapped[0][6]+1) * 10 + box_mapped[0][7]+1,
		r3c45 = (box_mapped[1][6]+1) * 10 + box_mapped[1][7]+1;
	//cout << "switch r2c78=" << r2c78 << " r3c12=" << r3c12 << " r3c45=" << r3c45 << endl;
	int tindex[8] = { 0, 8, 15, 17, 25,26,30,31};
	switch (r2c78){
	case 12:{//123 in r2c789
		switch (r3c12){
		case 78: return CheckR3c49(tindex);
		case 79: return CheckR3c49(&tindex[1]);
		case 89: return CheckR3c49(&tindex[2]);
		default: return 0;
		}
	}// end case 123
	case 13:{//132 in r2c789 17_25
		switch (r3c12){//689 31_65 698 65_92  869 92_110 896 110_126 968 126_135 986 136_139
		case 78: return CheckR3c49(&tindex[3]);
		case 87: return CheckR3c49(&tindex[4]);
		default: return 0;
		}
	}
	case 23:{// 231 in r2c789 26_30
		switch (r3c12){//689 31_65 698 65_92  869 92_110 896 110_126 968 126_135 986 136_139
		case 78: return CheckR3c49(&tindex[5]);
		case 79: return CheckR3c49(&tindex[6]);
		default: return 0;
		}
	}
	default: return 0;
	}// end switch r2c78
	return 0;
}
int BANDMINLEX::Getmin7_Switch (){// this is a 123456789 457 mode morphed ok
	int r2c78 = (box_mapped[2][3]+1) * 10 + box_mapped[2][4]+1,// as in the string
		r3c12 = (box_mapped[0][6]+1) * 10 + box_mapped[0][7]+1,
		r3c45 = (box_mapped[1][6]+1) * 10 + box_mapped[1][7]+1;
	if(diag)cout << "switch r2c4=" << box_mapped[1][3] +1<< " r2c78=" << r2c78 << " r3c12=" << r3c12 << " r3c45=" << r3c45 << endl;
	int tindex[50] = { 31, 65, 92, 110, 126, 135, // 457189236 189 ...
		139, 166, 186, 196, 208, 214, 217, 234, 239, 240, 262, 277, 284, 298, 303, 309, //index 21
		322, 332, 334, 343, 346, 347, 349, 354, 357, 359, 362, 366, 369, 375, 378, 379, //index 37
		381, 382, 386, 392, 395, 397, 407, 409, 411, 412,415,416
	};
	switch (box_mapped[1][3]){// split using r2c4
	case 0://189  r2c789 236_31 263_139 326_217 623_236 632_309
	{ 
		switch (r2c78){
		case 23:{
			switch (r3c12){//689 31_65 698 65_92  869 92_110 896 110_126 968 126_135 986 136_139
			case 68: return CheckR3c49(tindex);
			case 69: return CheckR3c49(&tindex[1]);
			case 86: return CheckR3c49(&tindex[2]);
			case 89: return CheckR3c49(&tindex[3]);
			case 96: return CheckR3c49(&tindex[4]);
			case 98: return CheckR3c49(&tindex[5]);
			default: return 0;
			}
		}// end case 23
		case 26:{
			switch (r3c12){
			case 68: return CheckR3c49(&tindex[6]);
			case 69: return CheckR3c49(&tindex[7]);
			case 86: return CheckR3c49(&tindex[8]);
			case 89: return CheckR3c49(&tindex[9]);
			case 96: return CheckR3c49(&tindex[10]);
			case 98: return CheckR3c49(&tindex[11]);
			default: return 0;
			}
		}// end case 26
		case 32:{
			switch (r3c12){
			case 68: return CheckR3c49(&tindex[12]);
			case 69: return CheckR3c49(&tindex[13]);
			case 86: return CheckR3c49(&tindex[14]);;
			default: return 0;
			}
		}// end case 32
		case 62:{
			switch (r3c12){
			case 68: return CheckR3c49(&tindex[15]);
			case 69: return CheckR3c49(&tindex[16]);
			case 86: return CheckR3c49(&tindex[17]);
			case 89: return CheckR3c49(&tindex[18]);
			case 96: return CheckR3c49(&tindex[19]);
			case 98: return CheckR3c49(&tindex[20]);
			default: return 0;
			}
		}// end case 62
		case 63:{
			switch (r3c12){
			case 68: return CheckR3c49(&tindex[21]);
			case 69: return CheckR3c49(&tindex[22]);
			case 86: return CheckR3c49(&tindex[23]);
			case 89: return CheckR3c49(&tindex[24]);
			case 96: return CheckR3c49(&tindex[25]);
			case 98: return CheckR3c49(&tindex[26]);
			default: return 0;
			}
		}// end case 63
		default: return 0;
		}// end //189  switch r2c78

	}//end //189
	case 1://289 r2c789  163_347 613_359 631_379
	{
		switch (r2c78){
		case 16:{
			switch (r3c12){
			case 68: return CheckR3c49(&tindex[27]);
			case 69: return CheckR3c49(&tindex[28]);
			case 86: return CheckR3c49(&tindex[29]);
			case 89: return CheckR3c49(&tindex[30]);
			default: return 0;
			}
		}// end case 16
		case 61:{
			switch (r3c12){
			case 68: return CheckR3c49(&tindex[31]);
			case 69: return CheckR3c49(&tindex[32]);
			case 86: return CheckR3c49(&tindex[33]);
			case 89: return CheckR3c49(&tindex[34]);
			case 96: return CheckR3c49(&tindex[35]);
			case 98: return CheckR3c49(&tindex[36]);
			default: return 0;
			}
		}// end case 61
		case 63:{
			switch (r3c12){
			case 68: return CheckR3c49(&tindex[37]);
			case 69: return CheckR3c49(&tindex[38]);
			case 86: return CheckR3c49(&tindex[39]);
			case 89: return CheckR3c49(&tindex[40]);
			case 96: return CheckR3c49(&tindex[41]);
			case 98: return CheckR3c49(&tindex[42]);
			default: return 0;
			}
		}// end case 63
		default: return 0;
		}// end switch r2c78

	}// end case 289
	case 2://389
	{
		switch (r2c78){
		case 61:{
			switch (r3c12){//689 31_65 698 65_92  869 92_110 896 110_126 968 126_135 986 136_139
			case 89: return CheckR3c49(&tindex[43]);
			case 98: return CheckR3c49(&tindex[44]);
			default: return 0;
			}
		}// end case 61
		case 62:{
			switch (r3c12){//689 31_65 698 65_92  869 92_110 896 110_126 968 126_135 986 136_139
			case 89: return CheckR3c49(&tindex[45]);
			case 98: return CheckR3c49(&tindex[46]);
			default: return 0;
			}
		}// end case 62
		default: return 0;
		}// end //289  switch r2c78

	}
	default://893
	{
		if (r2c78 - 61) return 0;
		if(r3c12==89)return CheckR3c49(&tindex[47]);
		else if (r3c12 == 98)return CheckR3c49(&tindex[48]);
		else return 0;
	}
	}// end switch

	return 0;
}

int BANDMINLEX::GetAutoMorphs(int ei416, PERM * tpout){// find automorphism for a band
	int band[27] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 4 };// band in 0 mode
	int nperm = 0;
	const char * tt = t416[ei416];
	for (int i = 11; i < 27; i++)band[ i] = tt[i-11] - '1';
	for (int ib = 0; ib < 3; ib++){
		for (int ipr = 0; ipr < 6; ipr++){
			rrx = tperm6[ipr];
			for (int ipc = 0; ipc < 6; ipc++){
				if (!(ib | ipr | ipc))continue; // skip start morph 
				ccx = tperm6[ipc];
				// map box1 morphed to band
				for (int i = 0; i < 3; i++){
					int *minir_new = &band[9 * rrx[i] + 3 * ib],
						*minir_old = &band[9*i];
					for (int j = 0; j < 3; j++){
						map[minir_new[j]] = minir_old[ccx[j]];
					}
				}
				// setup columns to have 012345678 in row 1 new
				int * rnew = &band[9 * rrx[0]],cols[9];
				for (int i = 0; i < 9; i++){
					int c = rnew[i], cmap = map[c];
					cols[cmap] = i;
				}
				// must be a stack perm
				int b1 = cols[0] / 3, b2 = cols[3] / 3;

				if (cols[1] / 3 - b1 || cols[2] / 3 - b1) continue;
				if (cols[4] / 3 - b2 || cols[5] / 3 - b2) continue;
			//  can now check minirows r2 r3 box2 box3
				for (int irow = 1; irow < 3; irow++){
					int * rnew = &band[9 * rrx[irow]],
						*rr=&band[9*irow];
					for (int j = 3; j < 9; j++){
						if (rr[j] - map[rnew[cols[j]]])goto next_perm;
					}
				}
				{
					PERM & p = tpout[nperm++];
					memcpy(p.rows, rrx, sizeof p.rows);
					memcpy(p.cols, cols, sizeof cols);
					memcpy(p.map, map, sizeof map);
					p.i416 = ei416;

				}
				//this is a valid perm, store it
			next_perm:{}
			}
		}
	}
	
	return nperm;
}
